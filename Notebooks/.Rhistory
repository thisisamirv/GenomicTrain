drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
library(VariantAnnotation)
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
library(GGtools)
library(foreach)
library(doParallel)
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
library(gwascat)
library(data.table)
exs2se = function (x,
assayname = "exprs",
fngetter = function(z) {
rownames(exprs(z))
},
annoDb,
probekeytype = "PROBEID",
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
z
},
ignIsStrand = TRUE,
ucsdChrnames = TRUE) {
annopk = annoDb
stopifnot(is(annopk, "ChipDb") | is(annopk, "OrgDb"))
fn = fngetter(x)
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
nfulls = na.omit(fulls)
nmultiaddr = nrow(nfulls) - length(fn)
rownames(locd) = locd[, probekeytype]
locd = na.omit(locd)
dropped = setdiff(fn, rownames(locd))
if (length(dropped) > 0) {
warning(
paste(
"There were",
length(dropped),
"addresses dropped owing to missing address information in bioc annotation"
)
)
}
locd = locd[intersect(rownames(locd), fn), ]
strand = rep("*", nrow(locd))
if (signIsStrand) {
strand = ifelse(locd[, "CHRLOC"] > 0, "+", "-")
}
chpref = ""
if (ucsdChrnames) {
chpref = "chr"
}
rowd = GRanges(paste0(chpref, locd[, "CHR"]),
IRanges(abs(locd[, "CHRLOC"]),
abs(locd[, "CHRLOCEND"])), strand = strand)
names(rowd) = rownames(locd)
metadata(rowd)$dropped = dropped
metadata(rowd)$nmultiaddr = nmultiaddr
hasrowd = match(names(rowd), fn, nomatch = 0)
ex = x[hasrowd, ]
stopifnot(nrow(exprs(ex)) == length(rowd))
ed = SimpleList(initExptData = experimentData(ex))
SummarizedExperiment(
assays = SimpleList(exprs = exprs(ex)),
rowData = rowd,
colData = DataFrame(pData(ex))
)
}
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
exs2se = function (x,
assayname = "exprs",
fngetter = function(z) {
rownames(exprs(z))
},
annoDb,
probekeytype = "PROBEID",
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
z
},
signIsStrand = TRUE,
ucsdChrnames = TRUE) {
annopk = annoDb
stopifnot(is(annopk, "ChipDb") | is(annopk, "OrgDb"))
fn = fngetter(x)
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
nfulls = na.omit(fulls)
nmultiaddr = nrow(nfulls) - length(fn)
rownames(locd) = locd[, probekeytype]
locd = na.omit(locd)
dropped = setdiff(fn, rownames(locd))
if (length(dropped) > 0) {
warning(
paste(
"There were",
length(dropped),
"addresses dropped owing to missing address information in bioc annotation"
)
)
}
locd = locd[intersect(rownames(locd), fn), ]
strand = rep("*", nrow(locd))
if (signIsStrand) {
strand = ifelse(locd[, "CHRLOC"] > 0, "+", "-")
}
chpref = ""
if (ucsdChrnames) {
chpref = "chr"
}
rowd = GRanges(paste0(chpref, locd[, "CHR"]),
IRanges(abs(locd[, "CHRLOC"]),
abs(locd[, "CHRLOCEND"])), strand = strand)
names(rowd) = rownames(locd)
metadata(rowd)$dropped = dropped
metadata(rowd)$nmultiaddr = nmultiaddr
hasrowd = match(names(rowd), fn, nomatch = 0)
ex = x[hasrowd, ]
stopifnot(nrow(exprs(ex)) == length(rowd))
ed = SimpleList(initExptData = experimentData(ex))
SummarizedExperiment(
assays = SimpleList(exprs = exprs(ex)),
rowData = rowd,
colData = DataFrame(pData(ex))
)
}
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
mpSE
duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
)
duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
z
}
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
locd = duphandler(fulls <-
select(
org.Hs.eg.db,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
locd = duphandler(fulls <-
select(
org.Hs.eg.db,
keytype = "ENTREZID",
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
fn = fngetter(mp)
fngetter = function(z) {
rownames(exprs(z))
}
fn = fngetter(mp)
locd = duphandler(fulls <-
select(
org.Hs.eg.db,
keytype = "ENTREZID",
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
??fngetter = function(z) {
rownames(exprs(z))
}
??select
mp
columns(mp)
fn
columns(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
keys(org.Hs.eg.db)
select(
+                           org.Hs.eg.db,
+                           keytype = "ENTREZID",
select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("CHR", "CHRLOC", "CHRLOCEND"))
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("CHR", "CHRLOC", "CHRLOCEND"))
class(s)
?select
columns(org.Hs.eg.db)
names(org.Hs.eg.db)
org.Hs.eg.db[1,1]
org.Hs.eg.db
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn)
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("CHR", "CHRLOC", "CHRLOCEND"))
columns(org.Hs.eg.db)
s
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("TXCHROM", "TXCHRLOC", "TXCHRLOCEND"))
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("TXCHROM", "CHRLOC", "CHRLOCEND"))
columns(org.Hs.eg.db)
genes(org.Hs.eg.db)
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("CHR", "CHRLOC", "CHRLOCEND"))
columns(org.Hs.eg.db)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
columns(TxDb.Hsapiens.UCSC.hg19.knownGene)
s<-select(TxDb.Hsapiens.UCSC.hg19.knownGene, keytype = "ENTREZID", keys = fn, columns = c("TXCHROM", "TXSTART", "TXEND"))
keytypes(TxDb.Hsapiens.UCSC.hg19.knownGene)
s<-select(org.Hs.eg.db, keytype = "ENTREZID", keys = fn, columns = c("CHR", "CHRLOC", "CHRLOCEND"))
keys(TxDb.Hsapiens.UCSC.hg19.knownGene)
keytypes(TxDb.Hsapiens.UCSC.hg19.knownGene)
keytypes(org.Hs.eg.db)
columns(org.Hs.eg.db)
columns(TxDb.Hsapiens.UCSC.hg19.knownGene)
rownames(exprs(mp))[1]
mp[1,1]
colnames(mp)
s<-select(TxDb.Hsapiens.UCSC.hg19.knownGene, keytype = "GENEID", keys = fn, columns = c("TXCHROM", "TXSTART", "TXEND"))
s
dim(s)
exs2se = function (x,
assayname = "exprs",
fngetter = function(z) {
rownames(exprs(z))
},
annoDb,
probekeytype = "PROBEID",
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
z
},
signIsStrand = TRUE,
ucsdChrnames = TRUE) {
annopk = annoDb
stopifnot(is(annopk, "ChipDb") | is(annopk, "OrgDb"))
fn = fngetter(x)
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
nfulls = na.omit(fulls)
nmultiaddr = nrow(nfulls) - length(fn)
rownames(locd) = locd[, probekeytype]
locd = na.omit(locd)
dropped = setdiff(fn, rownames(locd))
if (length(dropped) > 0) {
warning(
paste(
"There were",
length(dropped),
"addresses dropped owing to missing address information in bioc annotation"
)
)
}
locd = locd[intersect(rownames(locd), fn), ]
strand = rep("*", nrow(locd))
if (signIsStrand) {
strand = ifelse(locd[, "CHRLOC"] > 0, "+", "-")
}
chpref = ""
if (ucsdChrnames) {
chpref = "chr"
}
rowd = GRanges(paste0(chpref, locd[, "CHR"]),
IRanges(abs(locd[, "CHRLOC"]),
abs(locd[, "CHRLOCEND"])), strand = strand)
names(rowd) = rownames(locd)
metadata(rowd)$dropped = dropped
metadata(rowd)$nmultiaddr = nmultiaddr
hasrowd = match(names(rowd), fn, nomatch = 0)
ex = x[hasrowd, ]
stopifnot(nrow(exprs(ex)) == length(rowd))
ed = SimpleList(initExptData = experimentData(ex))
SummarizedExperiment(
assays = SimpleList(exprs = exprs(ex)),
rowData = rowd,
colData = DataFrame(pData(ex))
)
}
exs2se = function (x,
assayname = "exprs",
fngetter = function(z) {
rownames(exprs(z))
},
annoDb,
probekeytype = "PROBEID",
duphandler = function(z) {
if (any(isd <- duplicated(z[, "ENTREZID"]))) {
return(z[!isd, , drop = FALSE])
}
z
},
signIsStrand = TRUE,
ucsdChrnames = TRUE) {
annopk = annoDb
stopifnot(is(annopk, "ChipDb") | is(annopk, "OrgDb"))
fn = fngetter(x)
locd = duphandler(fulls <-
select(
annopk,
keytype = probekeytype,
keys = fn,
columns = c("CHR", "CHRLOC", "CHRLOCEND")
))
nfulls = na.omit(fulls)
nmultiaddr = nrow(nfulls) - length(fn)
rownames(locd) = locd[, probekeytype]
locd = na.omit(locd)
dropped = setdiff(fn, rownames(locd))
if (length(dropped) > 0) {
warning(
paste(
"There were",
length(dropped),
"addresses dropped owing to missing address information in bioc annotation"
)
)
}
locd = locd[intersect(rownames(locd), fn), ]
strand = rep("*", nrow(locd))
if (signIsStrand) {
strand = ifelse(locd[, "CHRLOC"] > 0, "+", "-")
}
chpref = ""
if (ucsdChrnames) {
chpref = "chr"
}
rowd = GRanges(paste0(chpref, locd[, "CHR"]),
IRanges(abs(locd[, "CHRLOC"]),
abs(locd[, "CHRLOCEND"])), strand = strand)
names(rowd) = rownames(locd)
metadata(rowd)$dropped = dropped
metadata(rowd)$nmultiaddr = nmultiaddr
hasrowd = match(names(rowd), fn, nomatch = 0)
ex = x[hasrowd, ]
stopifnot(nrow(exprs(ex)) == length(rowd))
ed = SimpleList(initExptData = experimentData(ex))
SummarizedExperiment(
assays = SimpleList(exprs = exprs(ex)),
rowData = rowd,
colData = DataFrame(pData(ex))
)
}
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = TxDb.Hsapiens.UCSC.hg19.knownGene, probekeytype = "GENEID")
library(Biobase)
library(GenomicFeatures)
load("Data/montpick_eset.RData")
mp = montpick.eset
annotation(mp) = "org.Hs.eg.db"
tmp = ensembldb::select(
org.Hs.eg.db,
keytype = "ENSEMBL",
columns = "ENTREZID",
keys = featureNames(mp)
)
ezs = split(tmp[, 2], tmp[, 1])
ezs = sapply(ezs, "[", 1)
drop = which(duplicated(ezs) | is.na(ezs))
if (length(drop) > 0) {
ezs = ezs[-drop]
}
mp = mp[names(ezs)]
featureNames(mp) = as.character(ezs[featureNames(mp)])
mpSE = exs2se(mp, annoDb = org.Hs.eg.db, probekeytype = "ENTREZID")
dim(mpSE)
rm(list=ls())
gc()
